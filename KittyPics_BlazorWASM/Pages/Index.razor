@page "/"
@using System.Timers
@using KittyPics.Shared
@implements IDisposable;
@inject HttpClient Http

<PageTitle>KittyPics</PageTitle>
<img style="position: absolute; right: 0; bottom: 0; width: 10%; max-width: 100px;" src="peeking.png" alt="Kitty"/>

<div style="text-align: center;">
    <div style="font-size: xxx-large; font-weight: bold;">KITTY PICS</div>
    <div style="font-size: x-large">Vote on which picture you like most.</div>
</div>

@if (SecondsRemaining != 0)
{
    <div class="round-time-bar" style="@($"--duration: {SecondsRemaining};")">
      <div></div>
    </div>
}
else
{
    <div style="height: 20px;"></div>
}

<div style="margin-top: 20px;">
    @if (LoadingPics)
    {
        <Loading />
    }
    else
    {
        <div style="display: flex; gap: 20px; justify-content: center; align-items: center;">
        @foreach (var pic in Pics)
        {
            <img src="@pic.Url" width="300" />
        }
        </div>
    }
</div>

<style>
    .round-time-bar div {
      height: 20px;
      max-width:  450px;
      margin:  10px auto;
      border-radius: 30px;
      background: #fff;
      animation: roundtime calc(var(--duration) * 1s) linear forwards;
      transform-origin: left center;
    }
    
    @@keyframes roundtime {
      to {
        /* More performant than animating `width` */
        transform: scaleX(0);
      }
    }
</style>

@code {

    private Timer _timer = null!;
    private int SecondsRemaining { get; set; } = 5;
    private const int NumberOfPicsToShowAtOnce = 4;
    private IEnumerable<Pic> Pics { get; set; } = null!;
    private bool LoadingPics { get; set; } = true;
    
    protected override async Task OnInitializedAsync()
    {
        Pics = await GetImages();
        LoadingPics = false;
        _timer = new Timer(5000);
        _timer.Elapsed += OnTimedEvent;
        _timer.Start();
    }

    private async Task<IEnumerable<Pic>> GetImages()
    {
        return await Http.GetFromJsonAsync<List<Pic>>($"Pics/GetRandomPics?count={NumberOfPicsToShowAtOnce}");
    }
    
    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync( async () =>
        {
            _timer.Stop();
            SecondsRemaining = 0;
            LoadingPics = true;
            StateHasChanged();
            Pics = await GetImages();
            await Task.Delay(2000);
            SecondsRemaining = 5;
            LoadingPics = false;
            _timer.Start();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}