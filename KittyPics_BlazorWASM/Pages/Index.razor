@page "/"
@using System.Timers
@using KittyPics.Shared
@implements IDisposable;
@inject HttpClient Http
@inject ILogger<Index> Logger;

<PageTitle>KittyPics</PageTitle>
<img style="position: fixed; right: 0; bottom: 0; width: 10%; max-width: 100px;" src="peeking.png" alt="Kitty"/>

<div style="text-align: center;">
    <div style="font-size: xxx-large; font-weight: bold;">KITTY PICS</div>
    <div style="font-size: x-large">Vote on which picture you like most.</div>
</div>

@if (AnErrorOccurred)
{
    <div style="text-align: center;">
        An error occurred loading the pictures. Please refresh and try again.
    </div>
}
else if (AreYouStillThere)
{
    <div style="text-align: center;">
        <div>It's been awhile since you voted. Are you still there?</div>
        <button class="confirm-still-there-button" @onclick="HideAreYouStillThere">Yes!</button>
    </div>
}
else
{
    @if (!LoadingPics && SecondsRemaining != 0)
    {
        <div class="round-time-bar" style="@($"--duration: {SecondsRemaining};")">
            <div></div>
        </div>
    }
    else
    {
        <div style="height: 20px;"></div>
    }

    <div style="margin-top: 20px;">
        @if (LoadingPics)
        {
            <Loading/>
        }
        else
        {
            <div class="row">
                @foreach (var pic in Pics)
                {
                    <div class="column">
                        <div style="position: relative; padding-top: 100%;">
                            <div class="@($"kitty-pic {(HasVoted ? "vote-cast" : "")}")" @onclick="@(() => VoteForPic(pic))" style="background: url(@pic.Url), #555; background-size: contain, auto">
                                @if (HasVoted)
                                {
                                    <div class="image-overlay">
                                        @if (PicWithHighestVotes == pic.PicID)
                                        {
                                            <img src="crown.svg" style="width: 5em;" alt="winner" />
                                        }
                                        <div style="font-size: 7em; line-height: 0.5;">@pic.Votes</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}


<style>
    .confirm-still-there-button {
	padding: 10px;
	border-radius: 5px;
	background-color: white;
	color: black;
	margin: 5px 0;

    }
    .image-overlay { text-align: center; background: none; }
    .image-overlay * {
        background:  none;
    }
    .vote-cast {
        background-blend-mode: screen;
        transition: all 0.3s ease 0s;
    }
    
    .row {
      display: flex;
      max-width: 60%;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center;
      margin: auto;
    }
    
    .column .kitty-pic {
      width: 100%;
      position: absolute;
      top: 0; left: 0; bottom: 0; right: 0;
    }
    
      .column {
        flex: 40%;
        max-width: 40%;
        padding: 0 10px;
      }
    
    @@media screen and (max-width: 600px) {
      .column {
        flex: 90%;
        max-width: 90%;
      }
    }
    
    .round-time-bar div {
      height: 20px;
      max-width:  450px;
      margin:  10px auto;
      border-radius: 30px;
      background: #fff;
      animation: roundtime calc(var(--duration) * 1s) linear forwards;
      transform-origin: left center;
    }
    
    .kitty-pic {
        transition: all 0.3s ease 0s;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .kitty-pic:hover {
        cursor: pointer;
        -webkit-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        -moz-box-shadow: 0px 5px 40px -10px rgba(0,0,0,0.57);
        transform: scale(108%);
        transition: all 0.3s ease 0s;
    }
    
    @@keyframes roundtime {
      to {
        /* More performant than animating `width` */
        transform: scaleX(0);
      }
    }
</style>

@code {

    private Timer _timer = new(5000);
    private int SecondsRemaining { get; set; } = 5;
    private const int NumberOfPicsToShowAtOnce = 4;
    private IEnumerable<Pic> Pics { get; set; } = null!;
    private bool LoadingPics { get; set; } = true;
    private bool HasVoted { get; set; }
    private int? PicWithHighestVotes => Pics?.MaxBy(p => p.Votes)?.PicID;
    private int IterationsSinceLastVote { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        Pics = await GetImages();
        LoadingPics = false;
        _timer.Elapsed += OnTimedEvent;
        _timer.Start();
    }

    private async Task<IEnumerable<Pic>> GetImages()
    {
        try
        {
            HasVoted = false;
            return await Http.GetFromJsonAsync<List<Pic>>($"Pics/GetRandomPics?count={NumberOfPicsToShowAtOnce}");
        }
        catch (Exception e)
        {
            HandleError(e);
            throw;
        }
    }

    private async void OnTimedEvent(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            _timer.Stop();
            SecondsRemaining = 0;
            LoadingPics = true;
            StateHasChanged();
            Pics = await GetImages();
            SecondsRemaining = 5;
            LoadingPics = false;
            IterationsSinceLastVote++;
            if (IterationsSinceLastVote > 5)
            {
                AreYouStillThere = true;
            }
            else
            {
                _timer.Start();
            }
            
            StateHasChanged();
        });
    }

    public bool AreYouStillThere { get; set; }

    public void Dispose()
    {
        _timer.Dispose();
    }

    public bool AnErrorOccurred { get; set; }

    private async Task VoteForPic(Pic pic)
    {
        if (HasVoted) return;
        IterationsSinceLastVote = 0;
        try
        {
            pic.Votes++;
            HasVoted = true;
            await Http.GetAsync($"Pics/Vote?picId={pic.PicID}");
            // show the votes on all the pics 
        }
        catch (Exception e)
        {
            HandleError(e);
            throw;
        }
    }

    private void HandleError(Exception e)
    {
        AnErrorOccurred = true;
        _timer.Stop();
        Logger.LogCritical(e.Message);
        LoadingPics = false;
    }

    private void HideAreYouStillThere()
    {
        IterationsSinceLastVote = 0;
        _timer.Start();
        AreYouStillThere = false;
    }

}